---
title: "实践：构建和回测中国特色三因子模型(CH-3)"
---

## 本次实验内容

1. **数据准备和预处理**: 学习如何获取和处理中国股票数据
2. **构建中国特色规模因子**: 掌握中国特色规模因子(SMC)的构建方法
3. **构建中国特色价值因子**: 掌握基于市盈率的价值因子(VMG)的构建方法
4. **回测因子收益**: 学习如何对因子进行回测和性能评估
5. **因子有效性分析**: 了解如何评估因子的有效性和统计显著性

## 背景：中国特色三因子模型(CH-3)

根据Liu, Stambaugh和Yuan (2019)的"Size and Value in China"研究，中国市场具有独特的特点，传统Fama-French三因子模型需要进行调整：

1. **壳价值效应**：中国市场最小30%的股票存在明显的壳价值现象，其价格受到被用作反向收购壳公司潜在价值的影响，而非传统风险因素

2. **规模因子调整**：需要剔除最小30%市值股票，构建SMB（Small Minus Big）因子，以避免壳价值的干扰

3. **价值因子调整**：市盈率（E/P）在中国市场的表现优于账面市值比（B/M），因此使用E/P构建VMG（Value Minus Growth）价值因子

4. **超强解释力**：调整后的CH-3模型在解释中国市场异象方面显著优于传统FF-3模型

## 实践：构建和回测中国特色三因子模型

### 规模因子(SMB)的构建步骤

1. **数据准备**:
   - 获取股票交易数据(收益率数据)
   - 获取股票市值数据
   - 获取股票市盈率数据(用于价值因子)

2. **数据预处理**:
   - 剔除财务异常股票
   - 处理缺失值和极端值
   - 对数据进行标准化处理

3. **分组构建**:
   - 首先剔除市值最小的30%股票(避免壳价值影响)
   - 在剩余70%股票中，按市值中位数分为小 b n市值和大市值两组

4. **因子计算**:
   - 计算小市值组合收益率
   - 计算大市值组合收益率
   - SMB = 小市值组合收益率 - 大市值组合收益率

### 价值因子(VMG)的构建步骤

1. **分组方法**:
   - 使用市盈率(E/P)替代传统的账面市值比(B/M)
   - 按E/P将剩余70%股票分为高E/P(价值型)和低E/P(成长型)两组

2. **因子计算**:
   - 计算高E/P(价值型)组合收益率
   - 计算低E/P(成长型)组合收益率
   - VMG = 高E/P组合收益率 - 低E/P组合收益率

### 使用Python实现中国特色三因子模型

下面我们将使用Python实现CH-3模型的构建与回测。

#### 1. 环境准备与数据获取

```python
# 导入必要的库
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from scipy import stats

# 设置绘图风格
plt.style.use('ggplot')
# 根据操作系统设置不同的字体
import platform
# 获取操作系统类型
system = platform.system()
# 设置 matplotlib 字体
if system == 'Windows':
    plt.rcParams['font.sans-serif'] = ['SimHei']  # Windows 使用黑体
elif system == 'Darwin':
    plt.rcParams['font.sans-serif'] = ['Songti SC']  # Mac 使用宋体
else:
    plt.rcParams['font.sans-serif'] = ['WenQuanYi Zen Hei']  # Linux 使用文泉驿正黑
# 解决负号显示问题
plt.rcParams['axes.unicode_minus'] = False

# 数据获取
# 在实际环境中，你可能需要使用CSMAR、Wind等数据源获取数据
# 这里我们假设已经有了以下数据框：
# 1. stock_returns: 包含股票月度收益率
# 2. market_cap: 包含股票市值数据
# 3. earnings_to_price: 包含股票市盈率倒数(E/P)数据
# 4. market_return: 市场收益率数据
```

#### 2. 数据预处理

```python
def preprocess_data(stock_returns, market_cap, earnings_to_price, date):
    """
    对数据进行预处理
    
    参数:
    stock_returns: 包含股票收益率的DataFrame
    market_cap: 包含股票市值的DataFrame
    earnings_to_price: 包含股票市盈率倒数(E/P)的DataFrame
    date: 当前处理的日期
    
    返回:
    处理后的数据
    """
    # 获取当期数据
    returns = stock_returns.loc[date]
    cap = market_cap.loc[date]
    ep = earnings_to_price.loc[date]
    
    # 合并数据
    data = pd.DataFrame({
        'returns': returns,
        'market_cap': cap,
        'earnings_to_price': ep
    })
    
    # 剔除缺失值
    data = data.dropna()
    
    # 剔除负收益公司(E/P为负)
    data = data[data['earnings_to_price'] > 0]
    
    # 处理极端值（使用百分位数裁剪）
    for col in ['market_cap', 'earnings_to_price']:
        lower_bound = data[col].quantile(0.01)
        upper_bound = data[col].quantile(0.99)
        data[col] = data[col].clip(lower_bound, upper_bound)
    
    return data
```

#### 3. 构建中国特色规模因子(SMB)

```python
def construct_smb_factor(data):
    """
    构建中国特色规模因子(SMB)
    
    参数:
    data: 预处理后的数据
    
    返回:
    SMB因子值和相关投资组合
    """
    # 按市值大小排序
    data = data.sort_values('market_cap')
    
    # 获取股票数量
    n_stocks = len(data)
    
    # 剔除市值最小的30%股票（避免壳价值影响）
    cutoff_small = int(n_stocks * 0.3)
    remaining_stocks = data.iloc[cutoff_small:]
    
    # 在剩余股票中按中位数划分为中市值和大市值组
    n_remaining = len(remaining_stocks)
    medium_stocks = remaining_stocks.iloc[:n_remaining//2]
    big_stocks = remaining_stocks.iloc[n_remaining//2:]
    
    # 计算组合的等权平均收益率
    medium_return = medium_stocks['returns'].mean()
    big_return = big_stocks['returns'].mean()
    
    # 计算SMC因子
    smc = medium_return - big_return
    
    return {
        'SMC': smc,
        'Medium': medium_return,
        'Big': big_return,
        'medium_stocks': medium_stocks,
        'big_stocks': big_stocks,
        'excluded_small': data.iloc[:cutoff_small]  # 被剔除的小市值股票
    }
```

#### 4. 构建中国特色价值因子(VMG)

```python
def construct_vmg_factor(data):
    """
    构建中国特色价值因子(VMG)
    
    参数:
    data: 预处理后的数据
    
    返回:
    VMG因子值和相关投资组合
    """
    # 按市值大小排序
    data = data.sort_values('market_cap')
    
    # 获取股票数量
    n_stocks = len(data)
    
    # 剔除市值最小的30%股票（避免壳价值影响）
    cutoff_small = int(n_stocks * 0.3)
    remaining_stocks = data.iloc[cutoff_small:]
    
    # 在剩余股票中按E/P排序
    remaining_stocks = remaining_stocks.sort_values('earnings_to_price')
    n_remaining = len(remaining_stocks)
    
    # 按E/P中位数划分为成长型和价值型
    growth_stocks = remaining_stocks.iloc[:n_remaining//2]  # 低E/P（成长型）
    value_stocks = remaining_stocks.iloc[n_remaining//2:]   # 高E/P（价值型）
    
    # 计算组合的等权平均收益率
    growth_return = growth_stocks['returns'].mean()
    value_return = value_stocks['returns'].mean()
    
    # 计算VMG因子
    vmg = value_return - growth_return
    
    return {
        'VMG': vmg,
        'Value': value_return,
        'Growth': growth_return,
        'value_stocks': value_stocks,
        'growth_stocks': growth_stocks
    }
```

#### 5. 回测框架

```python
def backtest_ch3_model(stock_returns, market_cap, earnings_to_price, market_return,
                      start_date, end_date, rebalance_freq='M'):
    """
    回测中国特色三因子模型(CH-3)
    
    参数:
    stock_returns: 包含股票收益率的DataFrame
    market_cap: 包含股票市值的DataFrame
    earnings_to_price: 包含股票市盈率倒数(E/P)的DataFrame
    market_return: 市场收益率Series
    start_date: 回测开始日期
    end_date: 回测结束日期
    rebalance_freq: 再平衡频率，'M'表示月度，'Q'表示季度
    
    返回:
    回测结果
    """
    # 创建时间索引
    if rebalance_freq == 'M':
        dates = pd.date_range(start=start_date, end=end_date, freq='M')
    elif rebalance_freq == 'Q':
        dates = pd.date_range(start=start_date, end=end_date, freq='Q')
    else:
        raise ValueError("rebalance_freq must be 'M' or 'Q'")
    
    # 初始化结果存储
    results = {
        'MKT': [],  # 市场因子
        'SMB': [],  # 规模因子
        'VMG': [],  # 价值因子
        'Medium': [],
        'Big': [],
        'Value': [],
        'Growth': [],
        'Date': []
    }
    
    # 循环每个交易日
    for date in dates:
        # 数据预处理
        data = preprocess_data(stock_returns, market_cap, earnings_to_price, date)
        
        # 构建规模因子
        smb_results = construct_smb_factor(data)
        
        # 构建价值因子
        vmg_results = construct_vmg_factor(data)
        
        # 获取市场因子（假设为市场超额收益率）
        mkt = market_return.loc[date] if date in market_return.index else np.nan
        
        # 记录结果
        results['MKT'].append(mkt)
        results['SMB'].append(smb_results['SMB'])
        results['VMG'].append(vmg_results['VMG'])
        results['Medium'].append(smb_results['Medium'])
        results['Big'].append(smb_results['Big'])
        results['Value'].append(vmg_results['Value'])
        results['Growth'].append(vmg_results['Growth'])
        results['Date'].append(date)
    
    # 转换为DataFrame
    results_df = pd.DataFrame(results)
    results_df.set_index('Date', inplace=True)
    
    return results_df
```

#### 6. 计算绩效指标

```python
def calculate_performance(returns_series):
    """
    计算投资组合绩效指标
    
    参数:
    returns_series: 包含收益率的Series
    
    返回:
    绩效指标字典
    """
    # 计算累积收益
    cumulative_return = (1 + returns_series).cumprod().iloc[-1] - 1
    
    # 计算年化收益率
    n_periods = len(returns_series)
    periods_per_year = 12  # 假设为月度数据
    annualized_return = (1 + cumulative_return) ** (periods_per_year / n_periods) - 1
    
    # 计算年化波动率
    annualized_vol = returns_series.std() * np.sqrt(periods_per_year)
    
    # 计算夏普比率 (假设无风险利率为0)
    sharpe_ratio = annualized_return / annualized_vol if annualized_vol != 0 else 0
    
    # 计算最大回撤
    cum_returns = (1 + returns_series).cumprod()
    running_max = cum_returns.cummax()
    drawdown = (cum_returns / running_max) - 1
    max_drawdown = drawdown.min()
    
    # 计算t统计量
    t_stat, p_value = stats.ttest_1samp(returns_series, 0)
    
    return {
        'Cumulative Return': cumulative_return,
        'Annualized Return': annualized_return,
        'Annualized Volatility': annualized_vol,
        'Sharpe Ratio': sharpe_ratio,
        'Max Drawdown': max_drawdown,
        't-statistic': t_stat,
        'p-value': p_value
    }
```

#### 7. 绘制结果图表

```python
def plot_results(results_df):
    """
    绘制回测结果图表
    
    参数:
    results_df: 回测结果DataFrame
    """
    # 计算累积收益
    cumulative_returns = (1 + results_df).cumprod()
    
    # 绘制三因子累积收益曲线
    plt.figure(figsize=(12, 6))
    plt.plot(cumulative_returns.index, cumulative_returns['MKT'], label='市场因子')
    plt.plot(cumulative_returns.index, cumulative_returns['SMB'], label='规模因子(SMB)')
    plt.plot(cumulative_returns.index, cumulative_returns['VMG'], label='价值因子(VMG)')
    
    plt.title('中国特色三因子(CH-3)累积收益曲线')
    plt.xlabel('日期')
    plt.ylabel('累积收益')
    plt.legend()
    plt.grid(True)
    plt.show()
    
    # 绘制规模组合累积收益曲线
    plt.figure(figsize=(12, 6))
    plt.plot(cumulative_returns.index, cumulative_returns['Medium'], label='中市值组合')
    plt.plot(cumulative_returns.index, cumulative_returns['Big'], label='大市值组合')
    
    plt.title('中国规模因子(SMB)组合累积收益曲线')
    plt.xlabel('日期')
    plt.ylabel('累积收益')
    plt.legend()
    plt.grid(True)
    plt.show()
    
    # 绘制价值组合累积收益曲线
    plt.figure(figsize=(12, 6))
    plt.plot(cumulative_returns.index, cumulative_returns['Value'], label='价值型组合')
    plt.plot(cumulative_returns.index, cumulative_returns['Growth'], label='成长型组合')
    
    plt.title('中国价值因子(VMG)组合累积收益曲线')
    plt.xlabel('日期')
    plt.ylabel('累积收益')
    plt.legend()
    plt.grid(True)
    plt.show()
    
    # 绘制月度收益率箱线图
    plt.figure(figsize=(10, 6))
    results_df[['MKT', 'SMB', 'VMG']].boxplot()
    plt.title('CH-3三因子月度收益率分布')
    plt.ylabel('月度收益率')
    plt.grid(True)
    plt.show()
```

#### 8. 实验流程整合

```python
def main():
    """
    主函数：执行完整的实验流程
    """
    # 在此处获取数据
    # stock_returns = ...
    # market_cap = ...
    # earnings_to_price = ...
    # market_return = ...
    
    # 设置回测参数
    start_date = '2010-01-01'
    end_date = '2020-12-31'
    rebalance_freq = 'M'  # 月度再平衡
    
    # 执行回测
    results = backtest_ch3_model(
        stock_returns, market_cap, earnings_to_price, market_return,
        start_date, end_date, rebalance_freq
    )
    
    # 计算绩效指标
    mkt_performance = calculate_performance(results['MKT'])
    smb_performance = calculate_performance(results['SMB'])
    vmg_performance = calculate_performance(results['VMG'])
    
    # 打印绩效指标
    print("市场因子(MKT)绩效指标:")
    for key, value in mkt_performance.items():
        print(f"{key}: {value:.4f}")
    
    print("\n规模因子(SMB)绩效指标:")
    for key, value in smb_performance.items():
        print(f"{key}: {value:.4f}")
    
    print("\n价值因子(VMG)绩效指标:")
    for key, value in vmg_performance.items():
        print(f"{key}: {value:.4f}")
    
    # 绘制结果图表
    plot_results(results)

# 执行主函数
if __name__ == "__main__":
    main()
```

## 拓展实验：CH-3模型与传统FF-3模型对比

在掌握了中国特色三因子模型的构建方法后，你可以尝试对比CH-3模型与传统FF-3模型的表现差异。本次实验的拓展内容包括：

1. **构建传统SMB与HML因子**：按照传统方法构建SMB与HML因子
2. **构建CH-3中的SMC与VMG因子**：按照中国特色方法构建SMC与VMG因子
3. **异象解释力对比**：测试两种模型对中国市场常见异象的解释能力
4. **模型稳定性对比**：评估两种模型在不同市场环境下的稳定性

## 实验思考题

1. 为什么在中国市场需要剔除市值最小的30%股票？这种剔除对规模因子表现有何影响？

2. 为什么在中国市场中E/P比B/M更有效？这与中国股票市场的哪些特点有关？

3. 在构建CH-3模型时，你认为中国市场的反向收购机制如何影响了小市值股票的定价？

4. 比较CH-3模型与传统FF-3模型在解释中国市场异象方面的差异，哪些异象能被CH-3模型更好地解释？

5. 如果政策环境变化导致反向收购监管趋严，你预计这会对CH-3模型的有效性产生什么影响？

## 参考资料

1. Liu, J., Stambaugh, R. F., & Yuan, Y. (2019). Size and Value in China. *Journal of Financial Economics*, 134(1), 48-69.

2. Fama, E. F., & French, K. R. (1993). Common risk factors in the returns on stocks and bonds. *Journal of Financial Economics*, 33(1), 3-56.

3. Hu, G. X., Chen, C., Shao, Y., & Wang, J. (2019). Fama–French in China: size and value factors in Chinese stock returns. *International Review of Finance*, 19(1), 3-44.
